<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AttackingSettingModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\AttackingSettingModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\AttackingSettingModel;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\AttackingSettingModel();
        if (property_exists($data, 'AntiCsrfTokenNames')) {
            $object->setAntiCsrfTokenNames($data->{'AntiCsrfTokenNames'});
        }
        if (property_exists($data, 'AttackParameterName')) {
            $object->setAttackParameterName($data->{'AttackParameterName'});
        }
        if (property_exists($data, 'AttackRefererHeader')) {
            $object->setAttackRefererHeader($data->{'AttackRefererHeader'});
        }
        if (property_exists($data, 'AttackUserAgentHeader')) {
            $object->setAttackUserAgentHeader($data->{'AttackUserAgentHeader'});
        }
        if (property_exists($data, 'AttackCookies')) {
            $object->setAttackCookies($data->{'AttackCookies'});
        }
        if (property_exists($data, 'MaxParametersToAttack')) {
            $object->setMaxParametersToAttack($data->{'MaxParametersToAttack'});
        }
        if (property_exists($data, 'OptimizeAttacksToRecurringParameters')) {
            $object->setOptimizeAttacksToRecurringParameters($data->{'OptimizeAttacksToRecurringParameters'});
        }
        if (property_exists($data, 'OptimizeHeaderAttacks')) {
            $object->setOptimizeHeaderAttacks($data->{'OptimizeHeaderAttacks'});
        }
        if (property_exists($data, 'ProofGenerationEnabled')) {
            $object->setProofGenerationEnabled($data->{'ProofGenerationEnabled'});
        }
        if (property_exists($data, 'RecurringParametersPageAttackLimit')) {
            $object->setRecurringParametersPageAttackLimit($data->{'RecurringParametersPageAttackLimit'});
        }
        if (property_exists($data, 'UseExtraParameters')) {
            $object->setUseExtraParameters($data->{'UseExtraParameters'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAntiCsrfTokenNames()) {
            $data->{'AntiCsrfTokenNames'} = $object->getAntiCsrfTokenNames();
        }
        if (null !== $object->getAttackParameterName()) {
            $data->{'AttackParameterName'} = $object->getAttackParameterName();
        }
        if (null !== $object->getAttackRefererHeader()) {
            $data->{'AttackRefererHeader'} = $object->getAttackRefererHeader();
        }
        if (null !== $object->getAttackUserAgentHeader()) {
            $data->{'AttackUserAgentHeader'} = $object->getAttackUserAgentHeader();
        }
        if (null !== $object->getAttackCookies()) {
            $data->{'AttackCookies'} = $object->getAttackCookies();
        }
        if (null !== $object->getMaxParametersToAttack()) {
            $data->{'MaxParametersToAttack'} = $object->getMaxParametersToAttack();
        }
        if (null !== $object->getOptimizeAttacksToRecurringParameters()) {
            $data->{'OptimizeAttacksToRecurringParameters'} = $object->getOptimizeAttacksToRecurringParameters();
        }
        if (null !== $object->getOptimizeHeaderAttacks()) {
            $data->{'OptimizeHeaderAttacks'} = $object->getOptimizeHeaderAttacks();
        }
        if (null !== $object->getProofGenerationEnabled()) {
            $data->{'ProofGenerationEnabled'} = $object->getProofGenerationEnabled();
        }
        if (null !== $object->getRecurringParametersPageAttackLimit()) {
            $data->{'RecurringParametersPageAttackLimit'} = $object->getRecurringParametersPageAttackLimit();
        }
        if (null !== $object->getUseExtraParameters()) {
            $data->{'UseExtraParameters'} = $object->getUseExtraParameters();
        }

        return $data;
    }
}
