<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AccountLicenseApiModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\AccountLicenseApiModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\AccountLicenseApiModel;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\AccountLicenseApiModel();
        if (property_exists($data, 'SubscriptionMaximumSiteLimit')) {
            $object->setSubscriptionMaximumSiteLimit($data->{'SubscriptionMaximumSiteLimit'});
        }
        if (property_exists($data, 'SubscriptionSiteCount')) {
            $object->setSubscriptionSiteCount($data->{'SubscriptionSiteCount'});
        }
        if (property_exists($data, 'SubscriptionEndDate')) {
            $object->setSubscriptionEndDate($data->{'SubscriptionEndDate'});
        }
        if (property_exists($data, 'SubscriptionStartDate')) {
            $object->setSubscriptionStartDate($data->{'SubscriptionStartDate'});
        }
        if (property_exists($data, 'IsAccountWhitelisted')) {
            $object->setIsAccountWhitelisted($data->{'IsAccountWhitelisted'});
        }
        if (property_exists($data, 'UsedScanCreditCount')) {
            $object->setUsedScanCreditCount($data->{'UsedScanCreditCount'});
        }
        if (property_exists($data, 'ScanCreditCount')) {
            $object->setScanCreditCount($data->{'ScanCreditCount'});
        }
        if (property_exists($data, 'IsCreditScanEnabled')) {
            $object->setIsCreditScanEnabled($data->{'IsCreditScanEnabled'});
        }
        if (property_exists($data, 'IsSubscriptionEnabled')) {
            $object->setIsSubscriptionEnabled($data->{'IsSubscriptionEnabled'});
        }
        if (property_exists($data, 'PreVerifiedWebsites')) {
            $values = [];
            foreach ($data->{'PreVerifiedWebsites'} as $value) {
                $values[] = $value;
            }
            $object->setPreVerifiedWebsites($values);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getSubscriptionMaximumSiteLimit()) {
            $data->{'SubscriptionMaximumSiteLimit'} = $object->getSubscriptionMaximumSiteLimit();
        }
        if (null !== $object->getSubscriptionSiteCount()) {
            $data->{'SubscriptionSiteCount'} = $object->getSubscriptionSiteCount();
        }
        if (null !== $object->getSubscriptionEndDate()) {
            $data->{'SubscriptionEndDate'} = $object->getSubscriptionEndDate();
        }
        if (null !== $object->getSubscriptionStartDate()) {
            $data->{'SubscriptionStartDate'} = $object->getSubscriptionStartDate();
        }
        if (null !== $object->getIsAccountWhitelisted()) {
            $data->{'IsAccountWhitelisted'} = $object->getIsAccountWhitelisted();
        }
        if (null !== $object->getUsedScanCreditCount()) {
            $data->{'UsedScanCreditCount'} = $object->getUsedScanCreditCount();
        }
        if (null !== $object->getScanCreditCount()) {
            $data->{'ScanCreditCount'} = $object->getScanCreditCount();
        }
        if (null !== $object->getIsCreditScanEnabled()) {
            $data->{'IsCreditScanEnabled'} = $object->getIsCreditScanEnabled();
        }
        if (null !== $object->getIsSubscriptionEnabled()) {
            $data->{'IsSubscriptionEnabled'} = $object->getIsSubscriptionEnabled();
        }
        if (null !== $object->getPreVerifiedWebsites()) {
            $values = [];
            foreach ($object->getPreVerifiedWebsites() as $value) {
                $values[] = $value;
            }
            $data->{'PreVerifiedWebsites'} = $values;
        }

        return $data;
    }
}
