<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ScheduledScanRecurrenceViewModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\ScheduledScanRecurrenceViewModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\ScheduledScanRecurrenceViewModel;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\ScheduledScanRecurrenceViewModel();
        if (property_exists($data, 'RepeatType')) {
            $object->setRepeatType($data->{'RepeatType'});
        }
        if (property_exists($data, 'Interval')) {
            $object->setInterval($data->{'Interval'});
        }
        if (property_exists($data, 'StartDate')) {
            $object->setStartDate(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'StartDate'}));
        }
        if (property_exists($data, 'EndingType')) {
            $object->setEndingType($data->{'EndingType'});
        }
        if (property_exists($data, 'DaysOfWeek')) {
            $values = [];
            foreach ($data->{'DaysOfWeek'} as $value) {
                $values[] = $value;
            }
            $object->setDaysOfWeek($values);
        }
        if (property_exists($data, 'MonthsOfYear')) {
            $values_1 = [];
            foreach ($data->{'MonthsOfYear'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setMonthsOfYear($values_1);
        }
        if (property_exists($data, 'Ordinal')) {
            $object->setOrdinal($data->{'Ordinal'});
        }
        if (property_exists($data, 'EndOn')) {
            $object->setEndOn($data->{'EndOn'});
        }
        if (property_exists($data, 'EndOnOccurences')) {
            $object->setEndOnOccurences($data->{'EndOnOccurences'});
        }
        if (property_exists($data, 'DayOfMonth')) {
            $object->setDayOfMonth($data->{'DayOfMonth'});
        }
        if (property_exists($data, 'EndOnDate')) {
            $object->setEndOnDate(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'EndOnDate'}));
        }
        if (property_exists($data, 'DayOfWeek')) {
            $object->setDayOfWeek($data->{'DayOfWeek'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getRepeatType()) {
            $data->{'RepeatType'} = $object->getRepeatType();
        }
        if (null !== $object->getInterval()) {
            $data->{'Interval'} = $object->getInterval();
        }
        if (null !== $object->getStartDate()) {
            $data->{'StartDate'} = $object->getStartDate()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getEndingType()) {
            $data->{'EndingType'} = $object->getEndingType();
        }
        if (null !== $object->getDaysOfWeek()) {
            $values = [];
            foreach ($object->getDaysOfWeek() as $value) {
                $values[] = $value;
            }
            $data->{'DaysOfWeek'} = $values;
        }
        if (null !== $object->getMonthsOfYear()) {
            $values_1 = [];
            foreach ($object->getMonthsOfYear() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'MonthsOfYear'} = $values_1;
        }
        if (null !== $object->getOrdinal()) {
            $data->{'Ordinal'} = $object->getOrdinal();
        }
        if (null !== $object->getEndOn()) {
            $data->{'EndOn'} = $object->getEndOn();
        }
        if (null !== $object->getEndOnOccurences()) {
            $data->{'EndOnOccurences'} = $object->getEndOnOccurences();
        }
        if (null !== $object->getDayOfMonth()) {
            $data->{'DayOfMonth'} = $object->getDayOfMonth();
        }
        if (null !== $object->getEndOnDate()) {
            $data->{'EndOnDate'} = $object->getEndOnDate()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getDayOfWeek()) {
            $data->{'DayOfWeek'} = $object->getDayOfWeek();
        }

        return $data;
    }
}
