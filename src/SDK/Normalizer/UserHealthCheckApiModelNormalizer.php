<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UserHealthCheckApiModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\UserHealthCheckApiModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\UserHealthCheckApiModel;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\UserHealthCheckApiModel();
        if (property_exists($data, 'DateFormat')) {
            $object->setDateFormat($data->{'DateFormat'});
        }
        if (property_exists($data, 'DisplayName')) {
            $object->setDisplayName($data->{'DisplayName'});
        }
        if (property_exists($data, 'Email')) {
            $object->setEmail($data->{'Email'});
        }
        if (property_exists($data, 'TimeZoneInfo')) {
            $object->setTimeZoneInfo($data->{'TimeZoneInfo'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getDateFormat()) {
            $data->{'DateFormat'} = $object->getDateFormat();
        }
        if (null !== $object->getDisplayName()) {
            $data->{'DisplayName'} = $object->getDisplayName();
        }
        if (null !== $object->getEmail()) {
            $data->{'Email'} = $object->getEmail();
        }
        if (null !== $object->getTimeZoneInfo()) {
            $data->{'TimeZoneInfo'} = $object->getTimeZoneInfo();
        }

        return $data;
    }
}
