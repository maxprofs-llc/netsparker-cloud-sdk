<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class FormAuthenticationSettingModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\FormAuthenticationSettingModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\FormAuthenticationSettingModel;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\FormAuthenticationSettingModel();
        if (property_exists($data, 'CustomScripts')) {
            $values = [];
            foreach ($data->{'CustomScripts'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Montross50\\NetsparkerCloud\\SDK\\Model\\FormAuthenticationCustomScript', 'json', $context);
            }
            $object->setCustomScripts($values);
        }
        if (property_exists($data, 'DefaultPersonaValidation')) {
            $object->setDefaultPersonaValidation($data->{'DefaultPersonaValidation'});
        }
        if (property_exists($data, 'DetectBearerToken')) {
            $object->setDetectBearerToken($data->{'DetectBearerToken'});
        }
        if (property_exists($data, 'DisableLogoutDetection')) {
            $object->setDisableLogoutDetection($data->{'DisableLogoutDetection'});
        }
        if (property_exists($data, 'IsEnabled')) {
            $object->setIsEnabled($data->{'IsEnabled'});
        }
        if (property_exists($data, 'LoginFormUrl')) {
            $object->setLoginFormUrl($data->{'LoginFormUrl'});
        }
        if (property_exists($data, 'LoginRequiredUrl')) {
            $object->setLoginRequiredUrl($data->{'LoginRequiredUrl'});
        }
        if (property_exists($data, 'LogoutKeywordPatterns')) {
            $values_1 = [];
            foreach ($data->{'LogoutKeywordPatterns'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Montross50\\NetsparkerCloud\\SDK\\Model\\LogoutKeywordPatternModel', 'json', $context);
            }
            $object->setLogoutKeywordPatterns($values_1);
        }
        if (property_exists($data, 'LogoutKeywordPatternsValue')) {
            $object->setLogoutKeywordPatternsValue($data->{'LogoutKeywordPatternsValue'});
        }
        if (property_exists($data, 'LogoutRedirectPattern')) {
            $object->setLogoutRedirectPattern($data->{'LogoutRedirectPattern'});
        }
        if (property_exists($data, 'OverrideTargetUrl')) {
            $object->setOverrideTargetUrl($data->{'OverrideTargetUrl'});
        }
        if (property_exists($data, 'Personas')) {
            $values_2 = [];
            foreach ($data->{'Personas'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Montross50\\NetsparkerCloud\\SDK\\Model\\FormAuthenticationPersona', 'json', $context);
            }
            $object->setPersonas($values_2);
        }
        if (property_exists($data, 'PersonasValidation')) {
            $object->setPersonasValidation($data->{'PersonasValidation'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCustomScripts()) {
            $values = [];
            foreach ($object->getCustomScripts() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'CustomScripts'} = $values;
        }
        if (null !== $object->getDefaultPersonaValidation()) {
            $data->{'DefaultPersonaValidation'} = $object->getDefaultPersonaValidation();
        }
        if (null !== $object->getDetectBearerToken()) {
            $data->{'DetectBearerToken'} = $object->getDetectBearerToken();
        }
        if (null !== $object->getDisableLogoutDetection()) {
            $data->{'DisableLogoutDetection'} = $object->getDisableLogoutDetection();
        }
        if (null !== $object->getIsEnabled()) {
            $data->{'IsEnabled'} = $object->getIsEnabled();
        }
        if (null !== $object->getLoginFormUrl()) {
            $data->{'LoginFormUrl'} = $object->getLoginFormUrl();
        }
        if (null !== $object->getLoginRequiredUrl()) {
            $data->{'LoginRequiredUrl'} = $object->getLoginRequiredUrl();
        }
        if (null !== $object->getLogoutKeywordPatterns()) {
            $values_1 = [];
            foreach ($object->getLogoutKeywordPatterns() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'LogoutKeywordPatterns'} = $values_1;
        }
        if (null !== $object->getLogoutKeywordPatternsValue()) {
            $data->{'LogoutKeywordPatternsValue'} = $object->getLogoutKeywordPatternsValue();
        }
        if (null !== $object->getLogoutRedirectPattern()) {
            $data->{'LogoutRedirectPattern'} = $object->getLogoutRedirectPattern();
        }
        if (null !== $object->getOverrideTargetUrl()) {
            $data->{'OverrideTargetUrl'} = $object->getOverrideTargetUrl();
        }
        if (null !== $object->getPersonas()) {
            $values_2 = [];
            foreach ($object->getPersonas() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'Personas'} = $values_2;
        }
        if (null !== $object->getPersonasValidation()) {
            $data->{'PersonasValidation'} = $object->getPersonasValidation();
        }

        return $data;
    }
}
