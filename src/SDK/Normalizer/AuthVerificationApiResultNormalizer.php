<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AuthVerificationApiResultNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\AuthVerificationApiResult';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\AuthVerificationApiResult;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\AuthVerificationApiResult();
        if (property_exists($data, 'Keywords')) {
            $values = [];
            foreach ($data->{'Keywords'} as $value) {
                $values[] = $value;
            }
            $object->setKeywords($values);
        }
        if (property_exists($data, 'LoginImageBase64')) {
            $object->setLoginImageBase64($data->{'LoginImageBase64'});
        }
        if (property_exists($data, 'LoginRequiredUrl')) {
            $object->setLoginRequiredUrl($data->{'LoginRequiredUrl'});
        }
        if (property_exists($data, 'LogoutImageBase64')) {
            $object->setLogoutImageBase64($data->{'LogoutImageBase64'});
        }
        if (property_exists($data, 'LogoutSignatureType')) {
            $object->setLogoutSignatureType($data->{'LogoutSignatureType'});
        }
        if (property_exists($data, 'RedirectLocation')) {
            $object->setRedirectLocation($data->{'RedirectLocation'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getKeywords()) {
            $values = [];
            foreach ($object->getKeywords() as $value) {
                $values[] = $value;
            }
            $data->{'Keywords'} = $values;
        }
        if (null !== $object->getLoginImageBase64()) {
            $data->{'LoginImageBase64'} = $object->getLoginImageBase64();
        }
        if (null !== $object->getLoginRequiredUrl()) {
            $data->{'LoginRequiredUrl'} = $object->getLoginRequiredUrl();
        }
        if (null !== $object->getLogoutImageBase64()) {
            $data->{'LogoutImageBase64'} = $object->getLogoutImageBase64();
        }
        if (null !== $object->getLogoutSignatureType()) {
            $data->{'LogoutSignatureType'} = $object->getLogoutSignatureType();
        }
        if (null !== $object->getRedirectLocation()) {
            $data->{'RedirectLocation'} = $object->getRedirectLocation();
        }

        return $data;
    }
}
