<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UpdateScanPolicySettingModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\UpdateScanPolicySettingModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\UpdateScanPolicySettingModel;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\UpdateScanPolicySettingModel();
        if (property_exists($data, 'Id')) {
            $object->setId($data->{'Id'});
        }
        if (property_exists($data, 'IsShared')) {
            $object->setIsShared($data->{'IsShared'});
        }
        if (property_exists($data, 'DesktopId')) {
            $object->setDesktopId($data->{'DesktopId'});
        }
        if (property_exists($data, 'AttackingSettings')) {
            $object->setAttackingSettings($this->denormalizer->denormalize($data->{'AttackingSettings'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\AttackingSettingModel', 'json', $context));
        }
        if (property_exists($data, 'AutoCompleteSettings')) {
            $values = [];
            foreach ($data->{'AutoCompleteSettings'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Montross50\\NetsparkerCloud\\SDK\\Model\\AutoCompleteSettingModel', 'json', $context);
            }
            $object->setAutoCompleteSettings($values);
        }
        if (property_exists($data, 'BruteForceSettings')) {
            $object->setBruteForceSettings($this->denormalizer->denormalize($data->{'BruteForceSettings'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\BruteForceSettingModel', 'json', $context));
        }
        if (property_exists($data, 'CrawlingSettings')) {
            $object->setCrawlingSettings($this->denormalizer->denormalize($data->{'CrawlingSettings'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\CrawlingSettingModel', 'json', $context));
        }
        if (property_exists($data, 'CsrfSettings')) {
            $object->setCsrfSettings($this->denormalizer->denormalize($data->{'CsrfSettings'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\CsrfSettingModel', 'json', $context));
        }
        if (property_exists($data, 'Custom404Settings')) {
            $object->setCustom404Settings($this->denormalizer->denormalize($data->{'Custom404Settings'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\Custom404SettingModel', 'json', $context));
        }
        if (property_exists($data, 'CustomHttpHeaderSettings')) {
            $values_1 = [];
            foreach ($data->{'CustomHttpHeaderSettings'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Montross50\\NetsparkerCloud\\SDK\\Model\\CustomHttpHeaderSetting', 'json', $context);
            }
            $object->setCustomHttpHeaderSettings($values_1);
        }
        if (property_exists($data, 'Description')) {
            $object->setDescription($data->{'Description'});
        }
        if (property_exists($data, 'EnableKnowledgebase')) {
            $object->setEnableKnowledgebase($data->{'EnableKnowledgebase'});
        }
        if (property_exists($data, 'FormValueSettings')) {
            $values_2 = [];
            foreach ($data->{'FormValueSettings'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Montross50\\NetsparkerCloud\\SDK\\Model\\FormValueSettingModel', 'json', $context);
            }
            $object->setFormValueSettings($values_2);
        }
        if (property_exists($data, 'HttpRequestSettings')) {
            $object->setHttpRequestSettings($this->denormalizer->denormalize($data->{'HttpRequestSettings'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\HttpRequestSettingModel', 'json', $context));
        }
        if (property_exists($data, 'IgnoredEmailPatterns')) {
            $values_3 = [];
            foreach ($data->{'IgnoredEmailPatterns'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Montross50\\NetsparkerCloud\\SDK\\Model\\EmailPatternSetting', 'json', $context);
            }
            $object->setIgnoredEmailPatterns($values_3);
        }
        if (property_exists($data, 'IgnorePatternSettings')) {
            $values_4 = [];
            foreach ($data->{'IgnorePatternSettings'} as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, 'Montross50\\NetsparkerCloud\\SDK\\Model\\IgnorePatternSettingModel', 'json', $context);
            }
            $object->setIgnorePatternSettings($values_4);
        }
        if (property_exists($data, 'JavaScriptSettings')) {
            $object->setJavaScriptSettings($this->denormalizer->denormalize($data->{'JavaScriptSettings'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\JavaScriptSettingsModel', 'json', $context));
        }
        if (property_exists($data, 'Name')) {
            $object->setName($data->{'Name'});
        }
        if (property_exists($data, 'ProxySettings')) {
            $object->setProxySettings($this->denormalizer->denormalize($data->{'ProxySettings'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\ProxySettingsModel', 'json', $context));
        }
        if (property_exists($data, 'ScopeSettings')) {
            $object->setScopeSettings($this->denormalizer->denormalize($data->{'ScopeSettings'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\ScopeSettingModel', 'json', $context));
        }
        if (property_exists($data, 'SecurityCheckGroups')) {
            $values_5 = [];
            foreach ($data->{'SecurityCheckGroups'} as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, 'Montross50\\NetsparkerCloud\\SDK\\Model\\SecurityCheckGroupModel', 'json', $context);
            }
            $object->setSecurityCheckGroups($values_5);
        }
        if (property_exists($data, 'SelectedGroups')) {
            $values_6 = [];
            foreach ($data->{'SelectedGroups'} as $value_6) {
                $values_6[] = $value_6;
            }
            $object->setSelectedGroups($values_6);
        }
        if (property_exists($data, 'SensitiveKeywordSettings')) {
            $values_7 = [];
            foreach ($data->{'SensitiveKeywordSettings'} as $value_7) {
                $values_7[] = $this->denormalizer->denormalize($value_7, 'Montross50\\NetsparkerCloud\\SDK\\Model\\SensitiveKeywordSettingModel', 'json', $context);
            }
            $object->setSensitiveKeywordSettings($values_7);
        }
        if (property_exists($data, 'SslTlsSettingModel')) {
            $object->setSslTlsSettingModel($this->denormalizer->denormalize($data->{'SslTlsSettingModel'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\SslTlsSettingModel', 'json', $context));
        }
        if (property_exists($data, 'WebStorageSettings')) {
            $values_8 = [];
            foreach ($data->{'WebStorageSettings'} as $value_8) {
                $values_8[] = $this->denormalizer->denormalize($value_8, 'Montross50\\NetsparkerCloud\\SDK\\Model\\WebStorageSetting', 'json', $context);
            }
            $object->setWebStorageSettings($values_8);
        }
        if (property_exists($data, 'ExtensionSettings')) {
            $values_9 = [];
            foreach ($data->{'ExtensionSettings'} as $value_9) {
                $values_9[] = $this->denormalizer->denormalize($value_9, 'Montross50\\NetsparkerCloud\\SDK\\Model\\ExtensionSettingModel', 'json', $context);
            }
            $object->setExtensionSettings($values_9);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'Id'} = $object->getId();
        }
        if (null !== $object->getIsShared()) {
            $data->{'IsShared'} = $object->getIsShared();
        }
        if (null !== $object->getDesktopId()) {
            $data->{'DesktopId'} = $object->getDesktopId();
        }
        if (null !== $object->getAttackingSettings()) {
            $data->{'AttackingSettings'} = $this->normalizer->normalize($object->getAttackingSettings(), 'json', $context);
        }
        if (null !== $object->getAutoCompleteSettings()) {
            $values = [];
            foreach ($object->getAutoCompleteSettings() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'AutoCompleteSettings'} = $values;
        }
        if (null !== $object->getBruteForceSettings()) {
            $data->{'BruteForceSettings'} = $this->normalizer->normalize($object->getBruteForceSettings(), 'json', $context);
        }
        if (null !== $object->getCrawlingSettings()) {
            $data->{'CrawlingSettings'} = $this->normalizer->normalize($object->getCrawlingSettings(), 'json', $context);
        }
        if (null !== $object->getCsrfSettings()) {
            $data->{'CsrfSettings'} = $this->normalizer->normalize($object->getCsrfSettings(), 'json', $context);
        }
        if (null !== $object->getCustom404Settings()) {
            $data->{'Custom404Settings'} = $this->normalizer->normalize($object->getCustom404Settings(), 'json', $context);
        }
        if (null !== $object->getCustomHttpHeaderSettings()) {
            $values_1 = [];
            foreach ($object->getCustomHttpHeaderSettings() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'CustomHttpHeaderSettings'} = $values_1;
        }
        if (null !== $object->getDescription()) {
            $data->{'Description'} = $object->getDescription();
        }
        if (null !== $object->getEnableKnowledgebase()) {
            $data->{'EnableKnowledgebase'} = $object->getEnableKnowledgebase();
        }
        if (null !== $object->getFormValueSettings()) {
            $values_2 = [];
            foreach ($object->getFormValueSettings() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'FormValueSettings'} = $values_2;
        }
        if (null !== $object->getHttpRequestSettings()) {
            $data->{'HttpRequestSettings'} = $this->normalizer->normalize($object->getHttpRequestSettings(), 'json', $context);
        }
        if (null !== $object->getIgnoredEmailPatterns()) {
            $values_3 = [];
            foreach ($object->getIgnoredEmailPatterns() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'IgnoredEmailPatterns'} = $values_3;
        }
        if (null !== $object->getIgnorePatternSettings()) {
            $values_4 = [];
            foreach ($object->getIgnorePatternSettings() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data->{'IgnorePatternSettings'} = $values_4;
        }
        if (null !== $object->getJavaScriptSettings()) {
            $data->{'JavaScriptSettings'} = $this->normalizer->normalize($object->getJavaScriptSettings(), 'json', $context);
        }
        if (null !== $object->getName()) {
            $data->{'Name'} = $object->getName();
        }
        if (null !== $object->getProxySettings()) {
            $data->{'ProxySettings'} = $this->normalizer->normalize($object->getProxySettings(), 'json', $context);
        }
        if (null !== $object->getScopeSettings()) {
            $data->{'ScopeSettings'} = $this->normalizer->normalize($object->getScopeSettings(), 'json', $context);
        }
        if (null !== $object->getSecurityCheckGroups()) {
            $values_5 = [];
            foreach ($object->getSecurityCheckGroups() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $data->{'SecurityCheckGroups'} = $values_5;
        }
        if (null !== $object->getSelectedGroups()) {
            $values_6 = [];
            foreach ($object->getSelectedGroups() as $value_6) {
                $values_6[] = $value_6;
            }
            $data->{'SelectedGroups'} = $values_6;
        }
        if (null !== $object->getSensitiveKeywordSettings()) {
            $values_7 = [];
            foreach ($object->getSensitiveKeywordSettings() as $value_7) {
                $values_7[] = $this->normalizer->normalize($value_7, 'json', $context);
            }
            $data->{'SensitiveKeywordSettings'} = $values_7;
        }
        if (null !== $object->getSslTlsSettingModel()) {
            $data->{'SslTlsSettingModel'} = $this->normalizer->normalize($object->getSslTlsSettingModel(), 'json', $context);
        }
        if (null !== $object->getWebStorageSettings()) {
            $values_8 = [];
            foreach ($object->getWebStorageSettings() as $value_8) {
                $values_8[] = $this->normalizer->normalize($value_8, 'json', $context);
            }
            $data->{'WebStorageSettings'} = $values_8;
        }
        if (null !== $object->getExtensionSettings()) {
            $values_9 = [];
            foreach ($object->getExtensionSettings() as $value_9) {
                $values_9[] = $this->normalizer->normalize($value_9, 'json', $context);
            }
            $data->{'ExtensionSettings'} = $values_9;
        }

        return $data;
    }
}
