<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ProxySettingsModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\ProxySettingsModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\ProxySettingsModel;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\ProxySettingsModel();
        if (property_exists($data, 'EnableCustomProxy')) {
            $object->setEnableCustomProxy($data->{'EnableCustomProxy'});
        }
        if (property_exists($data, 'ProxyAddress')) {
            $object->setProxyAddress($data->{'ProxyAddress'});
        }
        if (property_exists($data, 'ProxyAuthenticationRequired')) {
            $object->setProxyAuthenticationRequired($data->{'ProxyAuthenticationRequired'});
        }
        if (property_exists($data, 'ProxyDomain')) {
            $object->setProxyDomain($data->{'ProxyDomain'});
        }
        if (property_exists($data, 'ProxyPassword')) {
            $object->setProxyPassword($data->{'ProxyPassword'});
        }
        if (property_exists($data, 'ProxyPort')) {
            $object->setProxyPort($data->{'ProxyPort'});
        }
        if (property_exists($data, 'ProxyUsername')) {
            $object->setProxyUsername($data->{'ProxyUsername'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getEnableCustomProxy()) {
            $data->{'EnableCustomProxy'} = $object->getEnableCustomProxy();
        }
        if (null !== $object->getProxyAddress()) {
            $data->{'ProxyAddress'} = $object->getProxyAddress();
        }
        if (null !== $object->getProxyAuthenticationRequired()) {
            $data->{'ProxyAuthenticationRequired'} = $object->getProxyAuthenticationRequired();
        }
        if (null !== $object->getProxyDomain()) {
            $data->{'ProxyDomain'} = $object->getProxyDomain();
        }
        if (null !== $object->getProxyPassword()) {
            $data->{'ProxyPassword'} = $object->getProxyPassword();
        }
        if (null !== $object->getProxyPort()) {
            $data->{'ProxyPort'} = $object->getProxyPort();
        }
        if (null !== $object->getProxyUsername()) {
            $data->{'ProxyUsername'} = $object->getProxyUsername();
        }

        return $data;
    }
}
