<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ScanPolicyOptimizerOptionsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\ScanPolicyOptimizerOptions';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\ScanPolicyOptimizerOptions;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\ScanPolicyOptimizerOptions();
        if (property_exists($data, 'AppServer')) {
            $object->setAppServer($data->{'AppServer'});
        }
        if (property_exists($data, 'DatabaseServer')) {
            $object->setDatabaseServer($data->{'DatabaseServer'});
        }
        if (property_exists($data, 'DirectoryNameLimit')) {
            $object->setDirectoryNameLimit($data->{'DirectoryNameLimit'});
        }
        if (property_exists($data, 'DomParserPreset')) {
            $object->setDomParserPreset($data->{'DomParserPreset'});
        }
        if (property_exists($data, 'Name')) {
            $object->setName($data->{'Name'});
        }
        if (property_exists($data, 'NetsparkerHawkBaseUrl')) {
            $object->setNetsparkerHawkBaseUrl($data->{'NetsparkerHawkBaseUrl'});
        }
        if (property_exists($data, 'OperatingSystem')) {
            $object->setOperatingSystem($data->{'OperatingSystem'});
        }
        if (property_exists($data, 'Optimized')) {
            $object->setOptimized($data->{'Optimized'});
        }
        if (property_exists($data, 'ResourceFinders')) {
            $values = [];
            foreach ($data->{'ResourceFinders'} as $value) {
                $values[] = $value;
            }
            $object->setResourceFinders($values);
        }
        if (property_exists($data, 'SuggestionStatus')) {
            $object->setSuggestionStatus($data->{'SuggestionStatus'});
        }
        if (property_exists($data, 'WebServer')) {
            $object->setWebServer($data->{'WebServer'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAppServer()) {
            $data->{'AppServer'} = $object->getAppServer();
        }
        if (null !== $object->getDatabaseServer()) {
            $data->{'DatabaseServer'} = $object->getDatabaseServer();
        }
        if (null !== $object->getDirectoryNameLimit()) {
            $data->{'DirectoryNameLimit'} = $object->getDirectoryNameLimit();
        }
        if (null !== $object->getDomParserPreset()) {
            $data->{'DomParserPreset'} = $object->getDomParserPreset();
        }
        if (null !== $object->getName()) {
            $data->{'Name'} = $object->getName();
        }
        if (null !== $object->getNetsparkerHawkBaseUrl()) {
            $data->{'NetsparkerHawkBaseUrl'} = $object->getNetsparkerHawkBaseUrl();
        }
        if (null !== $object->getOperatingSystem()) {
            $data->{'OperatingSystem'} = $object->getOperatingSystem();
        }
        if (null !== $object->getOptimized()) {
            $data->{'Optimized'} = $object->getOptimized();
        }
        if (null !== $object->getResourceFinders()) {
            $values = [];
            foreach ($object->getResourceFinders() as $value) {
                $values[] = $value;
            }
            $data->{'ResourceFinders'} = $values;
        }
        if (null !== $object->getSuggestionStatus()) {
            $data->{'SuggestionStatus'} = $object->getSuggestionStatus();
        }
        if (null !== $object->getWebServer()) {
            $data->{'WebServer'} = $object->getWebServer();
        }

        return $data;
    }
}
