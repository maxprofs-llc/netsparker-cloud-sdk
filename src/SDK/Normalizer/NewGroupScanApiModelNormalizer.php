<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class NewGroupScanApiModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\NewGroupScanApiModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\NewGroupScanApiModel;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\NewGroupScanApiModel();
        if (property_exists($data, 'PolicyId')) {
            $object->setPolicyId($data->{'PolicyId'});
        }
        if (property_exists($data, 'ReportPolicyId')) {
            $object->setReportPolicyId($data->{'ReportPolicyId'});
        }
        if (property_exists($data, 'TimeWindow')) {
            $object->setTimeWindow($this->denormalizer->denormalize($data->{'TimeWindow'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\ScanTimeWindowModel', 'json', $context));
        }
        if (property_exists($data, 'WebsiteGroupName')) {
            $object->setWebsiteGroupName($data->{'WebsiteGroupName'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getPolicyId()) {
            $data->{'PolicyId'} = $object->getPolicyId();
        }
        if (null !== $object->getReportPolicyId()) {
            $data->{'ReportPolicyId'} = $object->getReportPolicyId();
        }
        if (null !== $object->getTimeWindow()) {
            $data->{'TimeWindow'} = $this->normalizer->normalize($object->getTimeWindow(), 'json', $context);
        }
        if (null !== $object->getWebsiteGroupName()) {
            $data->{'WebsiteGroupName'} = $object->getWebsiteGroupName();
        }

        return $data;
    }
}
