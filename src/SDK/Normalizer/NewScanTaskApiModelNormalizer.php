<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class NewScanTaskApiModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\NewScanTaskApiModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\NewScanTaskApiModel;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\NewScanTaskApiModel();
        if (property_exists($data, 'TargetUri')) {
            $object->setTargetUri($data->{'TargetUri'});
        }
        if (property_exists($data, 'AdditionalWebsites')) {
            $values = [];
            foreach ($data->{'AdditionalWebsites'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Montross50\\NetsparkerCloud\\SDK\\Model\\AdditionalWebsiteModel', 'json', $context);
            }
            $object->setAdditionalWebsites($values);
        }
        if (property_exists($data, 'BasicAuthenticationApiModel')) {
            $object->setBasicAuthenticationApiModel($this->denormalizer->denormalize($data->{'BasicAuthenticationApiModel'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\BasicAuthenticationSettingModel', 'json', $context));
        }
        if (property_exists($data, 'ClientCertificateAuthenticationSetting')) {
            $object->setClientCertificateAuthenticationSetting($this->denormalizer->denormalize($data->{'ClientCertificateAuthenticationSetting'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\ClientCertificateAuthenticationApiModel', 'json', $context));
        }
        if (property_exists($data, 'Cookies')) {
            $object->setCookies($data->{'Cookies'});
        }
        if (property_exists($data, 'CrawlAndAttack')) {
            $object->setCrawlAndAttack($data->{'CrawlAndAttack'});
        }
        if (property_exists($data, 'EnableHeuristicChecksInCustomUrlRewrite')) {
            $object->setEnableHeuristicChecksInCustomUrlRewrite($data->{'EnableHeuristicChecksInCustomUrlRewrite'});
        }
        if (property_exists($data, 'ExcludedLinks')) {
            $values_1 = [];
            foreach ($data->{'ExcludedLinks'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Montross50\\NetsparkerCloud\\SDK\\Model\\ExcludedLinkModel', 'json', $context);
            }
            $object->setExcludedLinks($values_1);
        }
        if (property_exists($data, 'DisallowedHttpMethods')) {
            $values_2 = [];
            foreach ($data->{'DisallowedHttpMethods'} as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setDisallowedHttpMethods($values_2);
        }
        if (property_exists($data, 'ExcludeLinks')) {
            $object->setExcludeLinks($data->{'ExcludeLinks'});
        }
        if (property_exists($data, 'FindAndFollowNewLinks')) {
            $object->setFindAndFollowNewLinks($data->{'FindAndFollowNewLinks'});
        }
        if (property_exists($data, 'FormAuthenticationSettingModel')) {
            $object->setFormAuthenticationSettingModel($this->denormalizer->denormalize($data->{'FormAuthenticationSettingModel'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\FormAuthenticationSettingModel', 'json', $context));
        }
        if (property_exists($data, 'HeaderAuthentication')) {
            $object->setHeaderAuthentication($this->denormalizer->denormalize($data->{'HeaderAuthentication'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\HeaderAuthenticationModel', 'json', $context));
        }
        if (property_exists($data, 'ImportedLinks')) {
            $values_3 = [];
            foreach ($data->{'ImportedLinks'} as $value_3) {
                $values_3[] = $value_3;
            }
            $object->setImportedLinks($values_3);
        }
        if (property_exists($data, 'ImportedFiles')) {
            $values_4 = [];
            foreach ($data->{'ImportedFiles'} as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, 'Montross50\\NetsparkerCloud\\SDK\\Model\\ApiFileModel', 'json', $context);
            }
            $object->setImportedFiles($values_4);
        }
        if (property_exists($data, 'IsMaxScanDurationEnabled')) {
            $object->setIsMaxScanDurationEnabled($data->{'IsMaxScanDurationEnabled'});
        }
        if (property_exists($data, 'MaxDynamicSignatures')) {
            $object->setMaxDynamicSignatures($data->{'MaxDynamicSignatures'});
        }
        if (property_exists($data, 'MaxScanDuration')) {
            $object->setMaxScanDuration($data->{'MaxScanDuration'});
        }
        if (property_exists($data, 'PolicyId')) {
            $object->setPolicyId($data->{'PolicyId'});
        }
        if (property_exists($data, 'ReportPolicyId')) {
            $object->setReportPolicyId($data->{'ReportPolicyId'});
        }
        if (property_exists($data, 'Scope')) {
            $object->setScope($data->{'Scope'});
        }
        if (property_exists($data, 'SubPathMaxDynamicSignatures')) {
            $object->setSubPathMaxDynamicSignatures($data->{'SubPathMaxDynamicSignatures'});
        }
        if (property_exists($data, 'TimeWindow')) {
            $object->setTimeWindow($this->denormalizer->denormalize($data->{'TimeWindow'}, 'Montross50\\NetsparkerCloud\\SDK\\Model\\ScanTimeWindowModel', 'json', $context));
        }
        if (property_exists($data, 'UrlRewriteAnalyzableExtensions')) {
            $object->setUrlRewriteAnalyzableExtensions($data->{'UrlRewriteAnalyzableExtensions'});
        }
        if (property_exists($data, 'UrlRewriteBlockSeparators')) {
            $object->setUrlRewriteBlockSeparators($data->{'UrlRewriteBlockSeparators'});
        }
        if (property_exists($data, 'UrlRewriteMode')) {
            $object->setUrlRewriteMode($data->{'UrlRewriteMode'});
        }
        if (property_exists($data, 'UrlRewriteRules')) {
            $values_5 = [];
            foreach ($data->{'UrlRewriteRules'} as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, 'Montross50\\NetsparkerCloud\\SDK\\Model\\UrlRewriteRuleModel', 'json', $context);
            }
            $object->setUrlRewriteRules($values_5);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getTargetUri()) {
            $data->{'TargetUri'} = $object->getTargetUri();
        }
        if (null !== $object->getAdditionalWebsites()) {
            $values = [];
            foreach ($object->getAdditionalWebsites() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'AdditionalWebsites'} = $values;
        }
        if (null !== $object->getBasicAuthenticationApiModel()) {
            $data->{'BasicAuthenticationApiModel'} = $this->normalizer->normalize($object->getBasicAuthenticationApiModel(), 'json', $context);
        }
        if (null !== $object->getClientCertificateAuthenticationSetting()) {
            $data->{'ClientCertificateAuthenticationSetting'} = $this->normalizer->normalize($object->getClientCertificateAuthenticationSetting(), 'json', $context);
        }
        if (null !== $object->getCookies()) {
            $data->{'Cookies'} = $object->getCookies();
        }
        if (null !== $object->getCrawlAndAttack()) {
            $data->{'CrawlAndAttack'} = $object->getCrawlAndAttack();
        }
        if (null !== $object->getEnableHeuristicChecksInCustomUrlRewrite()) {
            $data->{'EnableHeuristicChecksInCustomUrlRewrite'} = $object->getEnableHeuristicChecksInCustomUrlRewrite();
        }
        if (null !== $object->getExcludedLinks()) {
            $values_1 = [];
            foreach ($object->getExcludedLinks() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'ExcludedLinks'} = $values_1;
        }
        if (null !== $object->getDisallowedHttpMethods()) {
            $values_2 = [];
            foreach ($object->getDisallowedHttpMethods() as $value_2) {
                $values_2[] = $value_2;
            }
            $data->{'DisallowedHttpMethods'} = $values_2;
        }
        if (null !== $object->getExcludeLinks()) {
            $data->{'ExcludeLinks'} = $object->getExcludeLinks();
        }
        if (null !== $object->getFindAndFollowNewLinks()) {
            $data->{'FindAndFollowNewLinks'} = $object->getFindAndFollowNewLinks();
        }
        if (null !== $object->getFormAuthenticationSettingModel()) {
            $data->{'FormAuthenticationSettingModel'} = $this->normalizer->normalize($object->getFormAuthenticationSettingModel(), 'json', $context);
        }
        if (null !== $object->getHeaderAuthentication()) {
            $data->{'HeaderAuthentication'} = $this->normalizer->normalize($object->getHeaderAuthentication(), 'json', $context);
        }
        if (null !== $object->getImportedLinks()) {
            $values_3 = [];
            foreach ($object->getImportedLinks() as $value_3) {
                $values_3[] = $value_3;
            }
            $data->{'ImportedLinks'} = $values_3;
        }
        if (null !== $object->getImportedFiles()) {
            $values_4 = [];
            foreach ($object->getImportedFiles() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data->{'ImportedFiles'} = $values_4;
        }
        if (null !== $object->getIsMaxScanDurationEnabled()) {
            $data->{'IsMaxScanDurationEnabled'} = $object->getIsMaxScanDurationEnabled();
        }
        if (null !== $object->getMaxDynamicSignatures()) {
            $data->{'MaxDynamicSignatures'} = $object->getMaxDynamicSignatures();
        }
        if (null !== $object->getMaxScanDuration()) {
            $data->{'MaxScanDuration'} = $object->getMaxScanDuration();
        }
        if (null !== $object->getPolicyId()) {
            $data->{'PolicyId'} = $object->getPolicyId();
        }
        if (null !== $object->getReportPolicyId()) {
            $data->{'ReportPolicyId'} = $object->getReportPolicyId();
        }
        if (null !== $object->getScope()) {
            $data->{'Scope'} = $object->getScope();
        }
        if (null !== $object->getSubPathMaxDynamicSignatures()) {
            $data->{'SubPathMaxDynamicSignatures'} = $object->getSubPathMaxDynamicSignatures();
        }
        if (null !== $object->getTimeWindow()) {
            $data->{'TimeWindow'} = $this->normalizer->normalize($object->getTimeWindow(), 'json', $context);
        }
        if (null !== $object->getUrlRewriteAnalyzableExtensions()) {
            $data->{'UrlRewriteAnalyzableExtensions'} = $object->getUrlRewriteAnalyzableExtensions();
        }
        if (null !== $object->getUrlRewriteBlockSeparators()) {
            $data->{'UrlRewriteBlockSeparators'} = $object->getUrlRewriteBlockSeparators();
        }
        if (null !== $object->getUrlRewriteMode()) {
            $data->{'UrlRewriteMode'} = $object->getUrlRewriteMode();
        }
        if (null !== $object->getUrlRewriteRules()) {
            $values_5 = [];
            foreach ($object->getUrlRewriteRules() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $data->{'UrlRewriteRules'} = $values_5;
        }

        return $data;
    }
}
