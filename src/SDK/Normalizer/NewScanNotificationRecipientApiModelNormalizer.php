<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class NewScanNotificationRecipientApiModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\NewScanNotificationRecipientApiModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\NewScanNotificationRecipientApiModel;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\NewScanNotificationRecipientApiModel();
        if (property_exists($data, 'Emails')) {
            $values = [];
            foreach ($data->{'Emails'} as $value) {
                $values[] = $value;
            }
            $object->setEmails($values);
        }
        if (property_exists($data, 'ExcludedUsers')) {
            $values_1 = [];
            foreach ($data->{'ExcludedUsers'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setExcludedUsers($values_1);
        }
        if (property_exists($data, 'Integrations')) {
            $values_2 = [];
            foreach ($data->{'Integrations'} as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setIntegrations($values_2);
        }
        if (property_exists($data, 'PhoneNumbers')) {
            $values_3 = [];
            foreach ($data->{'PhoneNumbers'} as $value_3) {
                $values_3[] = $value_3;
            }
            $object->setPhoneNumbers($values_3);
        }
        if (property_exists($data, 'SpecificEmailRecipients')) {
            $values_4 = [];
            foreach ($data->{'SpecificEmailRecipients'} as $value_4) {
                $values_4[] = $value_4;
            }
            $object->setSpecificEmailRecipients($values_4);
        }
        if (property_exists($data, 'SpecificSmsRecipients')) {
            $values_5 = [];
            foreach ($data->{'SpecificSmsRecipients'} as $value_5) {
                $values_5[] = $value_5;
            }
            $object->setSpecificSmsRecipients($values_5);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getEmails()) {
            $values = [];
            foreach ($object->getEmails() as $value) {
                $values[] = $value;
            }
            $data->{'Emails'} = $values;
        }
        if (null !== $object->getExcludedUsers()) {
            $values_1 = [];
            foreach ($object->getExcludedUsers() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'ExcludedUsers'} = $values_1;
        }
        if (null !== $object->getIntegrations()) {
            $values_2 = [];
            foreach ($object->getIntegrations() as $value_2) {
                $values_2[] = $value_2;
            }
            $data->{'Integrations'} = $values_2;
        }
        if (null !== $object->getPhoneNumbers()) {
            $values_3 = [];
            foreach ($object->getPhoneNumbers() as $value_3) {
                $values_3[] = $value_3;
            }
            $data->{'PhoneNumbers'} = $values_3;
        }
        if (null !== $object->getSpecificEmailRecipients()) {
            $values_4 = [];
            foreach ($object->getSpecificEmailRecipients() as $value_4) {
                $values_4[] = $value_4;
            }
            $data->{'SpecificEmailRecipients'} = $values_4;
        }
        if (null !== $object->getSpecificSmsRecipients()) {
            $values_5 = [];
            foreach ($object->getSpecificSmsRecipients() as $value_5) {
                $values_5[] = $value_5;
            }
            $data->{'SpecificSmsRecipients'} = $values_5;
        }

        return $data;
    }
}
