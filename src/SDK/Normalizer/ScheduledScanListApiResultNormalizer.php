<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ScheduledScanListApiResultNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Montross50\\NetsparkerCloud\\SDK\\Model\\ScheduledScanListApiResult';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Montross50\NetsparkerCloud\SDK\Model\ScheduledScanListApiResult;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Montross50\NetsparkerCloud\SDK\Model\ScheduledScanListApiResult();
        if (property_exists($data, 'FirstItemOnPage')) {
            $object->setFirstItemOnPage($data->{'FirstItemOnPage'});
        }
        if (property_exists($data, 'HasNextPage')) {
            $object->setHasNextPage($data->{'HasNextPage'});
        }
        if (property_exists($data, 'HasPreviousPage')) {
            $object->setHasPreviousPage($data->{'HasPreviousPage'});
        }
        if (property_exists($data, 'IsFirstPage')) {
            $object->setIsFirstPage($data->{'IsFirstPage'});
        }
        if (property_exists($data, 'IsLastPage')) {
            $object->setIsLastPage($data->{'IsLastPage'});
        }
        if (property_exists($data, 'LastItemOnPage')) {
            $object->setLastItemOnPage($data->{'LastItemOnPage'});
        }
        if (property_exists($data, 'List')) {
            $values = [];
            foreach ($data->{'List'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Montross50\\NetsparkerCloud\\SDK\\Model\\ScheduledScanModel', 'json', $context);
            }
            $object->setList($values);
        }
        if (property_exists($data, 'PageCount')) {
            $object->setPageCount($data->{'PageCount'});
        }
        if (property_exists($data, 'PageNumber')) {
            $object->setPageNumber($data->{'PageNumber'});
        }
        if (property_exists($data, 'PageSize')) {
            $object->setPageSize($data->{'PageSize'});
        }
        if (property_exists($data, 'TotalItemCount')) {
            $object->setTotalItemCount($data->{'TotalItemCount'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getFirstItemOnPage()) {
            $data->{'FirstItemOnPage'} = $object->getFirstItemOnPage();
        }
        if (null !== $object->getHasNextPage()) {
            $data->{'HasNextPage'} = $object->getHasNextPage();
        }
        if (null !== $object->getHasPreviousPage()) {
            $data->{'HasPreviousPage'} = $object->getHasPreviousPage();
        }
        if (null !== $object->getIsFirstPage()) {
            $data->{'IsFirstPage'} = $object->getIsFirstPage();
        }
        if (null !== $object->getIsLastPage()) {
            $data->{'IsLastPage'} = $object->getIsLastPage();
        }
        if (null !== $object->getLastItemOnPage()) {
            $data->{'LastItemOnPage'} = $object->getLastItemOnPage();
        }
        if (null !== $object->getList()) {
            $values = [];
            foreach ($object->getList() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'List'} = $values;
        }
        if (null !== $object->getPageCount()) {
            $data->{'PageCount'} = $object->getPageCount();
        }
        if (null !== $object->getPageNumber()) {
            $data->{'PageNumber'} = $object->getPageNumber();
        }
        if (null !== $object->getPageSize()) {
            $data->{'PageSize'} = $object->getPageSize();
        }
        if (null !== $object->getTotalItemCount()) {
            $data->{'TotalItemCount'} = $object->getTotalItemCount();
        }

        return $data;
    }
}
