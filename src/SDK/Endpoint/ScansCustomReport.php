<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Endpoint;

class ScansCustomReport extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7HttplugEndpoint
{
    /**
     * @param array $queryParameters {
     *
     *     @var bool $excludeIgnoreds If set to true, HTTP response data will be excluded from the vulnerability detail. This parameter can only be
     *     @var string $id gets or sets the scan identifier
     *     @var string $reportName Gets or sets report name. Report name also keeps report type in it.
     *     @var string $type Gets or sets the report type.
     * }
     */
    public function __construct(array $queryParameters = [])
    {
        $this->queryParameters = $queryParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7HttplugEndpointTrait;

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/api/1.0/scans/custom-report/';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, \Http\Message\StreamFactory $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['excludeIgnoreds', 'id', 'reportName', 'type']);
        $optionsResolver->setRequired(['id', 'reportName']);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('excludeIgnoreds', ['bool']);
        $optionsResolver->setAllowedTypes('id', ['string']);
        $optionsResolver->setAllowedTypes('reportName', ['string']);
        $optionsResolver->setAllowedTypes('type', ['string']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     * @throws \Montross50\NetsparkerCloud\SDK\Exception\ScansCustomReportBadRequestException
     * @throws \Montross50\NetsparkerCloud\SDK\Exception\ScansCustomReportNotFoundException
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer)
    {
        if (200 === $status) {
            return null;
        }
        if (400 === $status) {
            throw new \Montross50\NetsparkerCloud\SDK\Exception\ScansCustomReportBadRequestException();
        }
        if (404 === $status) {
            throw new \Montross50\NetsparkerCloud\SDK\Exception\ScansCustomReportNotFoundException();
        }
    }
}
