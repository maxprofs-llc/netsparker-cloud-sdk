<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Model;

class CrawlingSettingModel
{
    /**
     * Gets or sets a value indicating whether parameter based navigation is enabled.
     *
     * @var bool
     */
    protected $enableParameterBasedNavigation;
    /**
     * Gets or sets whether REST Web Service parser is enabled.
     *
     * @var bool
     */
    protected $enableRestWebServiceParser;
    /**
     * Gets or sets whether SOAP Web Service parser is enabled.
     *
     * @var bool
     */
    protected $enableSoapWebServiceParser;
    /**
     * Gets or sets a value indicating whether text parser is enabled.
     *
     * @var bool
     */
    protected $enableTextParser;
    /**
     * Gets or sets a value indicating whether "fallback to get" is enabled.
     *
     * @var bool
     */
    protected $fallbackToGet;
    /**
     * Gets or sets the file extensions that will be used in File Extensions RegEx.
     *
     * @var string
     */
    protected $fileExtensions;
    /**
     * Gets or sets the maximum crawler URL count.
     *
     * @var int
     */
    protected $maximumCrawlerUrlCount;
    /**
     * Gets or sets the maximum signature.
     *
     * @var int
     */
    protected $maximumSignature;
    /**
     * Gets or sets the page visit limit for links containing navigation parameter.
     *
     * @var int
     */
    protected $navigationParameterPageVisitLimit;
    /**
     * Gets or sets the regular expression pattern for navigation parameter.
     *
     * @var string
     */
    protected $navigationParameterRegexPattern;
    /**
     * Gets or sets the page visit limit.
     *
     * @var int
     */
    protected $pageVisitLimit;
    /**
     * Gets or sets a value indicating whether the crawler should wait resource finder.
     *
     * @var bool
     */
    protected $waitResourceFinder;

    /**
     * Gets or sets a value indicating whether parameter based navigation is enabled.
     *
     * @return bool
     */
    public function getEnableParameterBasedNavigation(): ?bool
    {
        return $this->enableParameterBasedNavigation;
    }

    /**
     * Gets or sets a value indicating whether parameter based navigation is enabled.
     *
     * @param bool $enableParameterBasedNavigation
     *
     * @return self
     */
    public function setEnableParameterBasedNavigation(?bool $enableParameterBasedNavigation): self
    {
        $this->enableParameterBasedNavigation = $enableParameterBasedNavigation;

        return $this;
    }

    /**
     * Gets or sets whether REST Web Service parser is enabled.
     *
     * @return bool
     */
    public function getEnableRestWebServiceParser(): ?bool
    {
        return $this->enableRestWebServiceParser;
    }

    /**
     * Gets or sets whether REST Web Service parser is enabled.
     *
     * @param bool $enableRestWebServiceParser
     *
     * @return self
     */
    public function setEnableRestWebServiceParser(?bool $enableRestWebServiceParser): self
    {
        $this->enableRestWebServiceParser = $enableRestWebServiceParser;

        return $this;
    }

    /**
     * Gets or sets whether SOAP Web Service parser is enabled.
     *
     * @return bool
     */
    public function getEnableSoapWebServiceParser(): ?bool
    {
        return $this->enableSoapWebServiceParser;
    }

    /**
     * Gets or sets whether SOAP Web Service parser is enabled.
     *
     * @param bool $enableSoapWebServiceParser
     *
     * @return self
     */
    public function setEnableSoapWebServiceParser(?bool $enableSoapWebServiceParser): self
    {
        $this->enableSoapWebServiceParser = $enableSoapWebServiceParser;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether text parser is enabled.
     *
     * @return bool
     */
    public function getEnableTextParser(): ?bool
    {
        return $this->enableTextParser;
    }

    /**
     * Gets or sets a value indicating whether text parser is enabled.
     *
     * @param bool $enableTextParser
     *
     * @return self
     */
    public function setEnableTextParser(?bool $enableTextParser): self
    {
        $this->enableTextParser = $enableTextParser;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether "fallback to get" is enabled.
     *
     * @return bool
     */
    public function getFallbackToGet(): ?bool
    {
        return $this->fallbackToGet;
    }

    /**
     * Gets or sets a value indicating whether "fallback to get" is enabled.
     *
     * @param bool $fallbackToGet
     *
     * @return self
     */
    public function setFallbackToGet(?bool $fallbackToGet): self
    {
        $this->fallbackToGet = $fallbackToGet;

        return $this;
    }

    /**
     * Gets or sets the file extensions that will be used in File Extensions RegEx.
     *
     * @return string
     */
    public function getFileExtensions(): ?string
    {
        return $this->fileExtensions;
    }

    /**
     * Gets or sets the file extensions that will be used in File Extensions RegEx.
     *
     * @param string $fileExtensions
     *
     * @return self
     */
    public function setFileExtensions(?string $fileExtensions): self
    {
        $this->fileExtensions = $fileExtensions;

        return $this;
    }

    /**
     * Gets or sets the maximum crawler URL count.
     *
     * @return int
     */
    public function getMaximumCrawlerUrlCount(): ?int
    {
        return $this->maximumCrawlerUrlCount;
    }

    /**
     * Gets or sets the maximum crawler URL count.
     *
     * @param int $maximumCrawlerUrlCount
     *
     * @return self
     */
    public function setMaximumCrawlerUrlCount(?int $maximumCrawlerUrlCount): self
    {
        $this->maximumCrawlerUrlCount = $maximumCrawlerUrlCount;

        return $this;
    }

    /**
     * Gets or sets the maximum signature.
     *
     * @return int
     */
    public function getMaximumSignature(): ?int
    {
        return $this->maximumSignature;
    }

    /**
     * Gets or sets the maximum signature.
     *
     * @param int $maximumSignature
     *
     * @return self
     */
    public function setMaximumSignature(?int $maximumSignature): self
    {
        $this->maximumSignature = $maximumSignature;

        return $this;
    }

    /**
     * Gets or sets the page visit limit for links containing navigation parameter.
     *
     * @return int
     */
    public function getNavigationParameterPageVisitLimit(): ?int
    {
        return $this->navigationParameterPageVisitLimit;
    }

    /**
     * Gets or sets the page visit limit for links containing navigation parameter.
     *
     * @param int $navigationParameterPageVisitLimit
     *
     * @return self
     */
    public function setNavigationParameterPageVisitLimit(?int $navigationParameterPageVisitLimit): self
    {
        $this->navigationParameterPageVisitLimit = $navigationParameterPageVisitLimit;

        return $this;
    }

    /**
     * Gets or sets the regular expression pattern for navigation parameter.
     *
     * @return string
     */
    public function getNavigationParameterRegexPattern(): ?string
    {
        return $this->navigationParameterRegexPattern;
    }

    /**
     * Gets or sets the regular expression pattern for navigation parameter.
     *
     * @param string $navigationParameterRegexPattern
     *
     * @return self
     */
    public function setNavigationParameterRegexPattern(?string $navigationParameterRegexPattern): self
    {
        $this->navigationParameterRegexPattern = $navigationParameterRegexPattern;

        return $this;
    }

    /**
     * Gets or sets the page visit limit.
     *
     * @return int
     */
    public function getPageVisitLimit(): ?int
    {
        return $this->pageVisitLimit;
    }

    /**
     * Gets or sets the page visit limit.
     *
     * @param int $pageVisitLimit
     *
     * @return self
     */
    public function setPageVisitLimit(?int $pageVisitLimit): self
    {
        $this->pageVisitLimit = $pageVisitLimit;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether the crawler should wait resource finder.
     *
     * @return bool
     */
    public function getWaitResourceFinder(): ?bool
    {
        return $this->waitResourceFinder;
    }

    /**
     * Gets or sets a value indicating whether the crawler should wait resource finder.
     *
     * @param bool $waitResourceFinder
     *
     * @return self
     */
    public function setWaitResourceFinder(?bool $waitResourceFinder): self
    {
        $this->waitResourceFinder = $waitResourceFinder;

        return $this;
    }
}
