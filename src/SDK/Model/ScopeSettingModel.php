<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Model;

class ScopeSettingModel
{
    /**
     * Gets or sets a value indicating whether to block ad networks.
     *
     * @var bool
     */
    protected $blockAdNetworks;
    /**
     * Gets or sets a value indicating whether scope should be bypassed for static checks.
     *
     * @var bool
     */
    protected $byPassScopeForStaticChecks;
    /**
     * Gets or sets a value indicating whether case sensitive scope is enabled.
     *
     * @var bool
     */
    protected $caseSensitiveScope;
    /**
     * Gets or sets a value indicating whether content type check enabled.
     *
     * @var bool
     */
    protected $contentTypeCheckEnabled;
    /**
     * Gets or sets the ignored content types.
     *
     * @var ContentTypeModel[]
     */
    protected $ignoredContentTypes;
    /**
     * Gets or sets the restricted extensions.
     *
     * @var string
     */
    protected $restrictedExtensions;

    /**
     * Gets or sets a value indicating whether to block ad networks.
     *
     * @return bool
     */
    public function getBlockAdNetworks(): ?bool
    {
        return $this->blockAdNetworks;
    }

    /**
     * Gets or sets a value indicating whether to block ad networks.
     *
     * @param bool $blockAdNetworks
     *
     * @return self
     */
    public function setBlockAdNetworks(?bool $blockAdNetworks): self
    {
        $this->blockAdNetworks = $blockAdNetworks;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether scope should be bypassed for static checks.
     *
     * @return bool
     */
    public function getByPassScopeForStaticChecks(): ?bool
    {
        return $this->byPassScopeForStaticChecks;
    }

    /**
     * Gets or sets a value indicating whether scope should be bypassed for static checks.
     *
     * @param bool $byPassScopeForStaticChecks
     *
     * @return self
     */
    public function setByPassScopeForStaticChecks(?bool $byPassScopeForStaticChecks): self
    {
        $this->byPassScopeForStaticChecks = $byPassScopeForStaticChecks;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether case sensitive scope is enabled.
     *
     * @return bool
     */
    public function getCaseSensitiveScope(): ?bool
    {
        return $this->caseSensitiveScope;
    }

    /**
     * Gets or sets a value indicating whether case sensitive scope is enabled.
     *
     * @param bool $caseSensitiveScope
     *
     * @return self
     */
    public function setCaseSensitiveScope(?bool $caseSensitiveScope): self
    {
        $this->caseSensitiveScope = $caseSensitiveScope;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether content type check enabled.
     *
     * @return bool
     */
    public function getContentTypeCheckEnabled(): ?bool
    {
        return $this->contentTypeCheckEnabled;
    }

    /**
     * Gets or sets a value indicating whether content type check enabled.
     *
     * @param bool $contentTypeCheckEnabled
     *
     * @return self
     */
    public function setContentTypeCheckEnabled(?bool $contentTypeCheckEnabled): self
    {
        $this->contentTypeCheckEnabled = $contentTypeCheckEnabled;

        return $this;
    }

    /**
     * Gets or sets the ignored content types.
     *
     * @return ContentTypeModel[]
     */
    public function getIgnoredContentTypes(): ?array
    {
        return $this->ignoredContentTypes;
    }

    /**
     * Gets or sets the ignored content types.
     *
     * @param ContentTypeModel[] $ignoredContentTypes
     *
     * @return self
     */
    public function setIgnoredContentTypes(?array $ignoredContentTypes): self
    {
        $this->ignoredContentTypes = $ignoredContentTypes;

        return $this;
    }

    /**
     * Gets or sets the restricted extensions.
     *
     * @return string
     */
    public function getRestrictedExtensions(): ?string
    {
        return $this->restrictedExtensions;
    }

    /**
     * Gets or sets the restricted extensions.
     *
     * @param string $restrictedExtensions
     *
     * @return self
     */
    public function setRestrictedExtensions(?string $restrictedExtensions): self
    {
        $this->restrictedExtensions = $restrictedExtensions;

        return $this;
    }
}
