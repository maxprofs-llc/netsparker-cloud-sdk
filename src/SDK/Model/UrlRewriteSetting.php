<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Model;

class UrlRewriteSetting
{
    /**
     * Gets or sets a value indicating whether Heuristic URL Rewrite support is enabled together with custom URL Rewrite.
    support.
     *
     * @var bool
     */
    protected $enableHeuristicChecksInCustomUrlRewrite;
    /**
     * Gets or sets the root path maximum dynamic signatures for heuristic URL Rewrite detection.
     *
     * @var int
     */
    protected $maxDynamicSignatures;
    /**
     * Gets or sets the sub path maximum dynamic signatures for heuristic URL Rewrite detection.
     *
     * @var int
     */
    protected $subPathMaxDynamicSignatures;
    /**
     * Gets or sets the extensions that will be analyzed for heuristic URL Rewrite detection.
     *
     * @var string
     */
    protected $urlRewriteAnalyzableExtensions;
    /**
     * Gets or sets the block separators for heuristic URL Rewrite detection.
     *
     * @var string
     */
    protected $urlRewriteBlockSeparators;
    /**
     * Gets or sets the URL Rewrite mode.
     *
     * @var string
     */
    protected $urlRewriteMode;
    /**
     * Gets or sets the URL Rewrite rules.
     *
     * @var UrlRewriteRuleModel[]
     */
    protected $urlRewriteRules;

    /**
     * Gets or sets a value indicating whether Heuristic URL Rewrite support is enabled together with custom URL Rewrite.
    support.
     *
     * @return bool
     */
    public function getEnableHeuristicChecksInCustomUrlRewrite(): ?bool
    {
        return $this->enableHeuristicChecksInCustomUrlRewrite;
    }

    /**
     * Gets or sets a value indicating whether Heuristic URL Rewrite support is enabled together with custom URL Rewrite.
    support.
     *
     * @param bool $enableHeuristicChecksInCustomUrlRewrite
     *
     * @return self
     */
    public function setEnableHeuristicChecksInCustomUrlRewrite(?bool $enableHeuristicChecksInCustomUrlRewrite): self
    {
        $this->enableHeuristicChecksInCustomUrlRewrite = $enableHeuristicChecksInCustomUrlRewrite;

        return $this;
    }

    /**
     * Gets or sets the root path maximum dynamic signatures for heuristic URL Rewrite detection.
     *
     * @return int
     */
    public function getMaxDynamicSignatures(): ?int
    {
        return $this->maxDynamicSignatures;
    }

    /**
     * Gets or sets the root path maximum dynamic signatures for heuristic URL Rewrite detection.
     *
     * @param int $maxDynamicSignatures
     *
     * @return self
     */
    public function setMaxDynamicSignatures(?int $maxDynamicSignatures): self
    {
        $this->maxDynamicSignatures = $maxDynamicSignatures;

        return $this;
    }

    /**
     * Gets or sets the sub path maximum dynamic signatures for heuristic URL Rewrite detection.
     *
     * @return int
     */
    public function getSubPathMaxDynamicSignatures(): ?int
    {
        return $this->subPathMaxDynamicSignatures;
    }

    /**
     * Gets or sets the sub path maximum dynamic signatures for heuristic URL Rewrite detection.
     *
     * @param int $subPathMaxDynamicSignatures
     *
     * @return self
     */
    public function setSubPathMaxDynamicSignatures(?int $subPathMaxDynamicSignatures): self
    {
        $this->subPathMaxDynamicSignatures = $subPathMaxDynamicSignatures;

        return $this;
    }

    /**
     * Gets or sets the extensions that will be analyzed for heuristic URL Rewrite detection.
     *
     * @return string
     */
    public function getUrlRewriteAnalyzableExtensions(): ?string
    {
        return $this->urlRewriteAnalyzableExtensions;
    }

    /**
     * Gets or sets the extensions that will be analyzed for heuristic URL Rewrite detection.
     *
     * @param string $urlRewriteAnalyzableExtensions
     *
     * @return self
     */
    public function setUrlRewriteAnalyzableExtensions(?string $urlRewriteAnalyzableExtensions): self
    {
        $this->urlRewriteAnalyzableExtensions = $urlRewriteAnalyzableExtensions;

        return $this;
    }

    /**
     * Gets or sets the block separators for heuristic URL Rewrite detection.
     *
     * @return string
     */
    public function getUrlRewriteBlockSeparators(): ?string
    {
        return $this->urlRewriteBlockSeparators;
    }

    /**
     * Gets or sets the block separators for heuristic URL Rewrite detection.
     *
     * @param string $urlRewriteBlockSeparators
     *
     * @return self
     */
    public function setUrlRewriteBlockSeparators(?string $urlRewriteBlockSeparators): self
    {
        $this->urlRewriteBlockSeparators = $urlRewriteBlockSeparators;

        return $this;
    }

    /**
     * Gets or sets the URL Rewrite mode.
     *
     * @return string
     */
    public function getUrlRewriteMode(): ?string
    {
        return $this->urlRewriteMode;
    }

    /**
     * Gets or sets the URL Rewrite mode.
     *
     * @param string $urlRewriteMode
     *
     * @return self
     */
    public function setUrlRewriteMode(?string $urlRewriteMode): self
    {
        $this->urlRewriteMode = $urlRewriteMode;

        return $this;
    }

    /**
     * Gets or sets the URL Rewrite rules.
     *
     * @return UrlRewriteRuleModel[]
     */
    public function getUrlRewriteRules(): ?array
    {
        return $this->urlRewriteRules;
    }

    /**
     * Gets or sets the URL Rewrite rules.
     *
     * @param UrlRewriteRuleModel[] $urlRewriteRules
     *
     * @return self
     */
    public function setUrlRewriteRules(?array $urlRewriteRules): self
    {
        $this->urlRewriteRules = $urlRewriteRules;

        return $this;
    }
}
