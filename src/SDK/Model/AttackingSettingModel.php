<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Model;

class AttackingSettingModel
{
    /**
     * Gets or sets the anti CSRF token names.
     *
     * @var string
     */
    protected $antiCsrfTokenNames;
    /**
     * Gets or sets a value indicating whether parameter name attacking is enabled.
     *
     * @var bool
     */
    protected $attackParameterName;
    /**
     * Gets or sets a value indicating whether attacking to Referer header is enabled.
     *
     * @var bool
     */
    protected $attackRefererHeader;
    /**
     * Gets or sets a value indicating whether attacking to User-Agent header is enabled.
     *
     * @var bool
     */
    protected $attackUserAgentHeader;
    /**
     * Gets or sets a value indicating whether attacking to cookies is enabled.
     *
     * @var bool
     */
    protected $attackCookies;
    /**
     * Gets or sets the maximum parameters to attack.
     *
     * @var int
     */
    protected $maxParametersToAttack;
    /**
     * Gets or sets a value indicating whether optimization for recurring parameters is enabled.
     *
     * @var bool
     */
    protected $optimizeAttacksToRecurringParameters;
    /**
     * Gets or sets a value indicating whether optimization for header attacks is enabled.
     *
     * @var bool
     */
    protected $optimizeHeaderAttacks;
    /**
     * Gets or sets a value indicating whether proof generation is enabled.
     *
     * @var bool
     */
    protected $proofGenerationEnabled;
    /**
     * Gets or sets the page attack limit for links containing recurring parameters.
     *
     * @var int
     */
    protected $recurringParametersPageAttackLimit;
    /**
     * Gets or sets a value indicating whether extra parameters should be used.
     *
     * @var bool
     */
    protected $useExtraParameters;

    /**
     * Gets or sets the anti CSRF token names.
     *
     * @return string
     */
    public function getAntiCsrfTokenNames(): ?string
    {
        return $this->antiCsrfTokenNames;
    }

    /**
     * Gets or sets the anti CSRF token names.
     *
     * @param string $antiCsrfTokenNames
     *
     * @return self
     */
    public function setAntiCsrfTokenNames(?string $antiCsrfTokenNames): self
    {
        $this->antiCsrfTokenNames = $antiCsrfTokenNames;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether parameter name attacking is enabled.
     *
     * @return bool
     */
    public function getAttackParameterName(): ?bool
    {
        return $this->attackParameterName;
    }

    /**
     * Gets or sets a value indicating whether parameter name attacking is enabled.
     *
     * @param bool $attackParameterName
     *
     * @return self
     */
    public function setAttackParameterName(?bool $attackParameterName): self
    {
        $this->attackParameterName = $attackParameterName;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether attacking to Referer header is enabled.
     *
     * @return bool
     */
    public function getAttackRefererHeader(): ?bool
    {
        return $this->attackRefererHeader;
    }

    /**
     * Gets or sets a value indicating whether attacking to Referer header is enabled.
     *
     * @param bool $attackRefererHeader
     *
     * @return self
     */
    public function setAttackRefererHeader(?bool $attackRefererHeader): self
    {
        $this->attackRefererHeader = $attackRefererHeader;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether attacking to User-Agent header is enabled.
     *
     * @return bool
     */
    public function getAttackUserAgentHeader(): ?bool
    {
        return $this->attackUserAgentHeader;
    }

    /**
     * Gets or sets a value indicating whether attacking to User-Agent header is enabled.
     *
     * @param bool $attackUserAgentHeader
     *
     * @return self
     */
    public function setAttackUserAgentHeader(?bool $attackUserAgentHeader): self
    {
        $this->attackUserAgentHeader = $attackUserAgentHeader;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether attacking to cookies is enabled.
     *
     * @return bool
     */
    public function getAttackCookies(): ?bool
    {
        return $this->attackCookies;
    }

    /**
     * Gets or sets a value indicating whether attacking to cookies is enabled.
     *
     * @param bool $attackCookies
     *
     * @return self
     */
    public function setAttackCookies(?bool $attackCookies): self
    {
        $this->attackCookies = $attackCookies;

        return $this;
    }

    /**
     * Gets or sets the maximum parameters to attack.
     *
     * @return int
     */
    public function getMaxParametersToAttack(): ?int
    {
        return $this->maxParametersToAttack;
    }

    /**
     * Gets or sets the maximum parameters to attack.
     *
     * @param int $maxParametersToAttack
     *
     * @return self
     */
    public function setMaxParametersToAttack(?int $maxParametersToAttack): self
    {
        $this->maxParametersToAttack = $maxParametersToAttack;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether optimization for recurring parameters is enabled.
     *
     * @return bool
     */
    public function getOptimizeAttacksToRecurringParameters(): ?bool
    {
        return $this->optimizeAttacksToRecurringParameters;
    }

    /**
     * Gets or sets a value indicating whether optimization for recurring parameters is enabled.
     *
     * @param bool $optimizeAttacksToRecurringParameters
     *
     * @return self
     */
    public function setOptimizeAttacksToRecurringParameters(?bool $optimizeAttacksToRecurringParameters): self
    {
        $this->optimizeAttacksToRecurringParameters = $optimizeAttacksToRecurringParameters;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether optimization for header attacks is enabled.
     *
     * @return bool
     */
    public function getOptimizeHeaderAttacks(): ?bool
    {
        return $this->optimizeHeaderAttacks;
    }

    /**
     * Gets or sets a value indicating whether optimization for header attacks is enabled.
     *
     * @param bool $optimizeHeaderAttacks
     *
     * @return self
     */
    public function setOptimizeHeaderAttacks(?bool $optimizeHeaderAttacks): self
    {
        $this->optimizeHeaderAttacks = $optimizeHeaderAttacks;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether proof generation is enabled.
     *
     * @return bool
     */
    public function getProofGenerationEnabled(): ?bool
    {
        return $this->proofGenerationEnabled;
    }

    /**
     * Gets or sets a value indicating whether proof generation is enabled.
     *
     * @param bool $proofGenerationEnabled
     *
     * @return self
     */
    public function setProofGenerationEnabled(?bool $proofGenerationEnabled): self
    {
        $this->proofGenerationEnabled = $proofGenerationEnabled;

        return $this;
    }

    /**
     * Gets or sets the page attack limit for links containing recurring parameters.
     *
     * @return int
     */
    public function getRecurringParametersPageAttackLimit(): ?int
    {
        return $this->recurringParametersPageAttackLimit;
    }

    /**
     * Gets or sets the page attack limit for links containing recurring parameters.
     *
     * @param int $recurringParametersPageAttackLimit
     *
     * @return self
     */
    public function setRecurringParametersPageAttackLimit(?int $recurringParametersPageAttackLimit): self
    {
        $this->recurringParametersPageAttackLimit = $recurringParametersPageAttackLimit;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether extra parameters should be used.
     *
     * @return bool
     */
    public function getUseExtraParameters(): ?bool
    {
        return $this->useExtraParameters;
    }

    /**
     * Gets or sets a value indicating whether extra parameters should be used.
     *
     * @param bool $useExtraParameters
     *
     * @return self
     */
    public function setUseExtraParameters(?bool $useExtraParameters): self
    {
        $this->useExtraParameters = $useExtraParameters;

        return $this;
    }
}
