<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Montross50\NetsparkerCloud\SDK\Model;

class JavaScriptSettingsModel
{
    /**
     * Gets or sets the bail threshold.
     *
     * @var int
     */
    protected $bailThreshold;
    /**
     * Gets or sets the confirm open redirect simulate timeout.
     *
     * @var int
     */
    protected $confirmOpenRedirectSimulateTimeout;
    /**
     * Gets or sets the confirm xss simulate timeout.
     *
     * @var int
     */
    protected $confirmXssSimulateTimeout;
    /**
     * Gets or sets a value indicating whether to allow out of scope XML HTTP requests in DOM Parser.
     *
     * @var bool
     */
    protected $domParserAllowOutOfScopeXmlHttpRequests;
    /**
     * Gets or sets the DOM parser DFS limit.
     *
     * @var int
     */
    protected $domParserDfsLimit;
    /**
     * Gets or sets the DOM parser dotify.
     *
     * @var bool
     */
    protected $domParserDotify;
    /**
     * Gets or sets the DOM parser exclusion CSS selector.
     *
     * @var string
     */
    protected $domParserExclusionCssSelector;
    /**
     * Gets or sets a value indicating whether to extract resources using DOM Parser.
     *
     * @var bool
     */
    protected $domParserExtractResources;
    /**
     * Gets or sets a value indicating whether to filter events that contain a colon in their names.
     *
     * @var bool
     */
    protected $domParserFilterColonEvents;
    /**
     * Gets or sets the DOM parser filter document events.
     *
     * @var bool
     */
    protected $domParserFilterDocumentEvents;
    /**
     * Gets or sets a value indicating whether to ignore document events in DOM Parser.
     *
     * @var bool
     */
    protected $domParserIgnoreDocumentEvents;
    /**
     * Gets or sets the DOM parser load URL timeout.
     *
     * @var int
     */
    protected $domParserLoadUrlTimeout;
    /**
     * Gets or sets the DOM parser maximum option elements per select.
     *
     * @var int
     */
    protected $domParserMaxOptionElementsPerSelect;
    /**
     * Gets or sets the DOM parser persistent javascript cookies.
     *
     * @var string
     */
    protected $domParserPersistentJavaScriptCookies;
    /**
     * Gets or sets the DOM Parser LoadUrl timeout.
     *
     * @var int
     */
    protected $domParserPreSimulateWait;
    /**
     * Gets or sets the DOM parser simulation timeout.
     *
     * @var int
     */
    protected $domParserSimulationTimeout;
    /**
     * Gets or sets a value indicating whether enable DOM parser.
     *
     * @var bool
     */
    protected $enableDomParser;
    /**
     * Gets or sets the interevent timeout.
     *
     * @var int
     */
    protected $intereventTimeout;
    /**
     * Gets or sets the skip element count.
     *
     * @var int
     */
    protected $skipElementCount;
    /**
     * Gets or sets the skip threshold.
     *
     * @var int
     */
    protected $skipThreshold;

    /**
     * Gets or sets the bail threshold.
     *
     * @return int
     */
    public function getBailThreshold(): ?int
    {
        return $this->bailThreshold;
    }

    /**
     * Gets or sets the bail threshold.
     *
     * @param int $bailThreshold
     *
     * @return self
     */
    public function setBailThreshold(?int $bailThreshold): self
    {
        $this->bailThreshold = $bailThreshold;

        return $this;
    }

    /**
     * Gets or sets the confirm open redirect simulate timeout.
     *
     * @return int
     */
    public function getConfirmOpenRedirectSimulateTimeout(): ?int
    {
        return $this->confirmOpenRedirectSimulateTimeout;
    }

    /**
     * Gets or sets the confirm open redirect simulate timeout.
     *
     * @param int $confirmOpenRedirectSimulateTimeout
     *
     * @return self
     */
    public function setConfirmOpenRedirectSimulateTimeout(?int $confirmOpenRedirectSimulateTimeout): self
    {
        $this->confirmOpenRedirectSimulateTimeout = $confirmOpenRedirectSimulateTimeout;

        return $this;
    }

    /**
     * Gets or sets the confirm xss simulate timeout.
     *
     * @return int
     */
    public function getConfirmXssSimulateTimeout(): ?int
    {
        return $this->confirmXssSimulateTimeout;
    }

    /**
     * Gets or sets the confirm xss simulate timeout.
     *
     * @param int $confirmXssSimulateTimeout
     *
     * @return self
     */
    public function setConfirmXssSimulateTimeout(?int $confirmXssSimulateTimeout): self
    {
        $this->confirmXssSimulateTimeout = $confirmXssSimulateTimeout;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether to allow out of scope XML HTTP requests in DOM Parser.
     *
     * @return bool
     */
    public function getDomParserAllowOutOfScopeXmlHttpRequests(): ?bool
    {
        return $this->domParserAllowOutOfScopeXmlHttpRequests;
    }

    /**
     * Gets or sets a value indicating whether to allow out of scope XML HTTP requests in DOM Parser.
     *
     * @param bool $domParserAllowOutOfScopeXmlHttpRequests
     *
     * @return self
     */
    public function setDomParserAllowOutOfScopeXmlHttpRequests(?bool $domParserAllowOutOfScopeXmlHttpRequests): self
    {
        $this->domParserAllowOutOfScopeXmlHttpRequests = $domParserAllowOutOfScopeXmlHttpRequests;

        return $this;
    }

    /**
     * Gets or sets the DOM parser DFS limit.
     *
     * @return int
     */
    public function getDomParserDfsLimit(): ?int
    {
        return $this->domParserDfsLimit;
    }

    /**
     * Gets or sets the DOM parser DFS limit.
     *
     * @param int $domParserDfsLimit
     *
     * @return self
     */
    public function setDomParserDfsLimit(?int $domParserDfsLimit): self
    {
        $this->domParserDfsLimit = $domParserDfsLimit;

        return $this;
    }

    /**
     * Gets or sets the DOM parser dotify.
     *
     * @return bool
     */
    public function getDomParserDotify(): ?bool
    {
        return $this->domParserDotify;
    }

    /**
     * Gets or sets the DOM parser dotify.
     *
     * @param bool $domParserDotify
     *
     * @return self
     */
    public function setDomParserDotify(?bool $domParserDotify): self
    {
        $this->domParserDotify = $domParserDotify;

        return $this;
    }

    /**
     * Gets or sets the DOM parser exclusion CSS selector.
     *
     * @return string
     */
    public function getDomParserExclusionCssSelector(): ?string
    {
        return $this->domParserExclusionCssSelector;
    }

    /**
     * Gets or sets the DOM parser exclusion CSS selector.
     *
     * @param string $domParserExclusionCssSelector
     *
     * @return self
     */
    public function setDomParserExclusionCssSelector(?string $domParserExclusionCssSelector): self
    {
        $this->domParserExclusionCssSelector = $domParserExclusionCssSelector;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether to extract resources using DOM Parser.
     *
     * @return bool
     */
    public function getDomParserExtractResources(): ?bool
    {
        return $this->domParserExtractResources;
    }

    /**
     * Gets or sets a value indicating whether to extract resources using DOM Parser.
     *
     * @param bool $domParserExtractResources
     *
     * @return self
     */
    public function setDomParserExtractResources(?bool $domParserExtractResources): self
    {
        $this->domParserExtractResources = $domParserExtractResources;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether to filter events that contain a colon in their names.
     *
     * @return bool
     */
    public function getDomParserFilterColonEvents(): ?bool
    {
        return $this->domParserFilterColonEvents;
    }

    /**
     * Gets or sets a value indicating whether to filter events that contain a colon in their names.
     *
     * @param bool $domParserFilterColonEvents
     *
     * @return self
     */
    public function setDomParserFilterColonEvents(?bool $domParserFilterColonEvents): self
    {
        $this->domParserFilterColonEvents = $domParserFilterColonEvents;

        return $this;
    }

    /**
     * Gets or sets the DOM parser filter document events.
     *
     * @return bool
     */
    public function getDomParserFilterDocumentEvents(): ?bool
    {
        return $this->domParserFilterDocumentEvents;
    }

    /**
     * Gets or sets the DOM parser filter document events.
     *
     * @param bool $domParserFilterDocumentEvents
     *
     * @return self
     */
    public function setDomParserFilterDocumentEvents(?bool $domParserFilterDocumentEvents): self
    {
        $this->domParserFilterDocumentEvents = $domParserFilterDocumentEvents;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether to ignore document events in DOM Parser.
     *
     * @return bool
     */
    public function getDomParserIgnoreDocumentEvents(): ?bool
    {
        return $this->domParserIgnoreDocumentEvents;
    }

    /**
     * Gets or sets a value indicating whether to ignore document events in DOM Parser.
     *
     * @param bool $domParserIgnoreDocumentEvents
     *
     * @return self
     */
    public function setDomParserIgnoreDocumentEvents(?bool $domParserIgnoreDocumentEvents): self
    {
        $this->domParserIgnoreDocumentEvents = $domParserIgnoreDocumentEvents;

        return $this;
    }

    /**
     * Gets or sets the DOM parser load URL timeout.
     *
     * @return int
     */
    public function getDomParserLoadUrlTimeout(): ?int
    {
        return $this->domParserLoadUrlTimeout;
    }

    /**
     * Gets or sets the DOM parser load URL timeout.
     *
     * @param int $domParserLoadUrlTimeout
     *
     * @return self
     */
    public function setDomParserLoadUrlTimeout(?int $domParserLoadUrlTimeout): self
    {
        $this->domParserLoadUrlTimeout = $domParserLoadUrlTimeout;

        return $this;
    }

    /**
     * Gets or sets the DOM parser maximum option elements per select.
     *
     * @return int
     */
    public function getDomParserMaxOptionElementsPerSelect(): ?int
    {
        return $this->domParserMaxOptionElementsPerSelect;
    }

    /**
     * Gets or sets the DOM parser maximum option elements per select.
     *
     * @param int $domParserMaxOptionElementsPerSelect
     *
     * @return self
     */
    public function setDomParserMaxOptionElementsPerSelect(?int $domParserMaxOptionElementsPerSelect): self
    {
        $this->domParserMaxOptionElementsPerSelect = $domParserMaxOptionElementsPerSelect;

        return $this;
    }

    /**
     * Gets or sets the DOM parser persistent javascript cookies.
     *
     * @return string
     */
    public function getDomParserPersistentJavaScriptCookies(): ?string
    {
        return $this->domParserPersistentJavaScriptCookies;
    }

    /**
     * Gets or sets the DOM parser persistent javascript cookies.
     *
     * @param string $domParserPersistentJavaScriptCookies
     *
     * @return self
     */
    public function setDomParserPersistentJavaScriptCookies(?string $domParserPersistentJavaScriptCookies): self
    {
        $this->domParserPersistentJavaScriptCookies = $domParserPersistentJavaScriptCookies;

        return $this;
    }

    /**
     * Gets or sets the DOM Parser LoadUrl timeout.
     *
     * @return int
     */
    public function getDomParserPreSimulateWait(): ?int
    {
        return $this->domParserPreSimulateWait;
    }

    /**
     * Gets or sets the DOM Parser LoadUrl timeout.
     *
     * @param int $domParserPreSimulateWait
     *
     * @return self
     */
    public function setDomParserPreSimulateWait(?int $domParserPreSimulateWait): self
    {
        $this->domParserPreSimulateWait = $domParserPreSimulateWait;

        return $this;
    }

    /**
     * Gets or sets the DOM parser simulation timeout.
     *
     * @return int
     */
    public function getDomParserSimulationTimeout(): ?int
    {
        return $this->domParserSimulationTimeout;
    }

    /**
     * Gets or sets the DOM parser simulation timeout.
     *
     * @param int $domParserSimulationTimeout
     *
     * @return self
     */
    public function setDomParserSimulationTimeout(?int $domParserSimulationTimeout): self
    {
        $this->domParserSimulationTimeout = $domParserSimulationTimeout;

        return $this;
    }

    /**
     * Gets or sets a value indicating whether enable DOM parser.
     *
     * @return bool
     */
    public function getEnableDomParser(): ?bool
    {
        return $this->enableDomParser;
    }

    /**
     * Gets or sets a value indicating whether enable DOM parser.
     *
     * @param bool $enableDomParser
     *
     * @return self
     */
    public function setEnableDomParser(?bool $enableDomParser): self
    {
        $this->enableDomParser = $enableDomParser;

        return $this;
    }

    /**
     * Gets or sets the interevent timeout.
     *
     * @return int
     */
    public function getIntereventTimeout(): ?int
    {
        return $this->intereventTimeout;
    }

    /**
     * Gets or sets the interevent timeout.
     *
     * @param int $intereventTimeout
     *
     * @return self
     */
    public function setIntereventTimeout(?int $intereventTimeout): self
    {
        $this->intereventTimeout = $intereventTimeout;

        return $this;
    }

    /**
     * Gets or sets the skip element count.
     *
     * @return int
     */
    public function getSkipElementCount(): ?int
    {
        return $this->skipElementCount;
    }

    /**
     * Gets or sets the skip element count.
     *
     * @param int $skipElementCount
     *
     * @return self
     */
    public function setSkipElementCount(?int $skipElementCount): self
    {
        $this->skipElementCount = $skipElementCount;

        return $this;
    }

    /**
     * Gets or sets the skip threshold.
     *
     * @return int
     */
    public function getSkipThreshold(): ?int
    {
        return $this->skipThreshold;
    }

    /**
     * Gets or sets the skip threshold.
     *
     * @param int $skipThreshold
     *
     * @return self
     */
    public function setSkipThreshold(?int $skipThreshold): self
    {
        $this->skipThreshold = $skipThreshold;

        return $this;
    }
}
